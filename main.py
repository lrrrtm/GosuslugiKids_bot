import telebot
from func.take_base import take_base_clubs
from func.sorting import sorting
from func.take_info_clubs import take_info_clubs
from func.mail import mail_out
from func.geoloc import distance_calc
from settings import TOKEN
from func.keyboards import take_keyboard, Callback_data
import pymysql
from validate_email import validate_email

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
connection = pymysql.connect(
    host="localhost",
    user="root",
    password="1111",
    database="botDB"
)
incorrect_input_text = "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –≤–≤–µ–ª(–∞) —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"
already_registered_text = ", —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏‚úÖ"
bot = telebot.TeleBot(TOKEN)

# –ø—Ä–æ–≤–µ—Ä–∫–∞
def checkName(name):
    if len(name.split(' ')) == 3 and len(name.split(" ")[0]) > 1 and len(name.split(" ")[1]) > 1 and len(name.split(" ")[2]) > 1:
        return True
    return False


def checkDate(date):
    data = date.split(".")
    if len(data) != 3:
        return False
    if data[0].isdigit() and data[1].isdigit() and data[2].isdigit() and int(data[0]) in range(1, 32) and data[1] in ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"] and \
            int(data[2]) in range(2004, 2019):
        return True

'''
def delete_message(message_id, chat_id):
    return delete_message(chat_id, message_id)
'''



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == Callback_data[0]:
        handle_show(call.message, filtering(1)) # —Ñ–∏–ª—å—Ç—Ä —Å–ø–æ—Ä—Ç
    elif call.data == Callback_data[1]:
        handle_show(call.message, filtering(2)) # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif call.data == Callback_data[2]:
        handle_show(call.message, filtering(3)) # —Ñ–∏–ª—å—Ç—Ä —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
    elif call.data == Callback_data[3]:
        handle_show(call.message, filtering(4)) # —Ñ–∏–ª—å—Ç—Ä —à–∞—Ö–º–∞—Ç—ã
    elif call.data == Callback_data[4]:
        handle_show(call.message, filtering(5)) # —Ñ–∏–ª—å—Ç—Ä –º—É–∑—ã–∫–∞
    elif call.data == Callback_data[6]: # –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫—Ä—É–∂–∫–∏
        with connection.cursor() as cur:
            cur.execute('select * from clubs')
            dt = cur.fetchall()
        handle_show(call.message, dt)
    elif call.data == Callback_data[7]: # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫
        handle_filter(call.message)
    elif call.data == Callback_data[8]: # –≤—ã–≤–æ–¥ –∫—Ä—É–∂–∫–æ–≤
        handle_show(call.message, sorting(1))
    elif call.data == Callback_data[9]: # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∫—Ä—É–∂–∫–æ–≤
        with connection.cursor() as cur:
            cur.execute('select * from users where tId = {}'.format(str(call.message.chat.id)))
            dt = cur.fetchall()
        handle_show(call.message, sorting([dt[0][11], dt[0][12]]))
    elif call.data == Callback_data[10]: # —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–æ–≤
        handle_filter_types(call.message)
    elif call.data == Callback_data[13]: # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è–º
        handle_sent_mail(call.message)
    elif call.data == Callback_data[14]: # –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        with connection.cursor() as cur:
            cur.execute(f'update users set parent_phone = null where tID = ({call.message.chat.id})')
            connection.commit()
        handle_menu(call.message)
    elif call.data == Callback_data[15]: # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        handle_show_profile(call.message)
    elif call.data == Callback_data[16]: # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        handle_edit_profile(call.message)
    elif call.data == Callback_data[17]: # —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–≤–ª–µ—á–µ–Ω–∏—è–º
        handle_show(call.message, sorting(call.message.chat.id))


# —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=['menu'])

def handle_menu(message):
    tID = message.chat.id
    with connection.cursor() as cur:
        cur.execute('select kid_firstname, kid_lastname from users where tID = {}'.format(message.chat.id))
        name = cur.fetchall()
    if name:
        bot.send_message(message.chat.id, text=('–ß–µ–º –∑–∞–π–º—ë–º—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑, ' + str(name[0][1]) + '?'), reply_markup=take_keyboard('0'))
    else:
        bot.send_message(tID, "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏üòî\n–ù–∞–ø–∏—à–∏ /start")


# –≤—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@bot.message_handler(commands=['info'])
def handle_info(message, num):
    data = take_info_clubs(message.chat.id, int(num))
    info = data[0]
    bot.send_location(message.chat.id, data[1][1], data[1][0])
    bot.send_message(message.chat.id, info, reply_markup=take_keyboard('o1'))


def handle_show(message, data):
    bot.send_message(message.chat.id, text=take_base_clubs(data))
    bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∫—Ä—É–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è')


# –∑–∞–ø–∏—Å—å
@bot.message_handler(commands=['sent_mail'])
def handle_sent_mail(message):
    with connection.cursor() as cur:
        cur.execute('select parent_email, parent_lastname, parent_patronymic, kid_lastname, kid_firstname, parent_phone, '
                    'posX, posY from users where tID = {}'.format(message.chat.id))
        mail_data = cur.fetchall()
    with connection.cursor() as cur:
        cur.execute('select * from clubs')
        data = cur.fetchall()
    try:
        data = data[int(mail_data[0][5]) - 1]
        bot.send_message(message.chat.id, text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π –∫—Ä—É–∂–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—é. –£–¥–∞—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!')
        mail_out(mail_data[0][0], mail_data[0][1], mail_data[0][2], mail_data[0][4], mail_data[0][3], data[0],
                data[1], distance_calc(mail_data[0][6], mail_data[0][7], data[2], data[3]))
        handle_menu(message)
    except Exception as e:
        print(e)

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['filter_types'])
def handle_filter_types(message):
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä—É–∂–∫–∞', reply_markup=take_keyboard('f1'))


@bot.message_handler(commands=['filter'])
def handle_filter(message):
    with connection.cursor() as cur:
        cur.execute(f'select categories from users where tId = "{message.chat.id}"')
        data = cur.fetchall()
    if data[0][0] != None:
        bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã', reply_markup=take_keyboard('f2'))
    else:
        bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã', reply_markup=take_keyboard('f3'))


def sorting(tag):
    with connection.cursor() as cur:
        cur.execute('select * from clubs')
        data = list(cur.fetchall())
    if tag == 1:
        data = sorted(data, key=lambda x: x[tag])
    elif type(tag) == int:
        with connection.cursor() as cur:
            cur.execute(f'select * from users where tID = {tag}')
            db_info = cur.fetchall()
        try:
            intrests = list(db_info[0][13])
        except Exception:
            pass
        for i in range(len(data)):
            if data[i][5] not in intrests:
                t = data[i]
                del data[i]
                data.append(t)
    else:
        data = sorted(data, key=lambda x: distance_calc(x[2], x[3], tag[0], tag[1]))
    return data


def filtering(num):
    with connection.cursor() as cur:
        cur.execute(f'select * from clubs where category = {str(num)}')
        data = cur.fetchall()
    return data


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç
@bot.message_handler(commands=['start'])
def handle_start(message):
    tID = message.chat.id
    with connection.cursor() as cursor:
        cursor.execute("select kid_firstname, kid_lastname from users where tID = \"" + str(tID) + "\"")
        data = cursor.fetchall()
    if not data:
        with connection.cursor() as cursor:
            cursor.execute("insert into users (tID) VALUES (\"" + str(tID) + "\")")
            connection.commit()
        bot.send_message(tID, "–ü—Ä–∏–≤–µ—Çüëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Å—É—Å–ª—É–≥–∏ –î–µ—Ç–∏! "
                              "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫—Ä—É–∂–æ–∫ –∏–ª–∏ —Å–µ–∫—Ü–∏—é –ø–æ —Å–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–ºüôã")
        bot.send_message(
            tID, "–ß—Ç–æ–±—ã —è –ø–æ–º–æ–≥ —Ç–µ–±–µ, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ—Ä–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ")
        msg = bot.send_message(
            tID, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        bot.register_next_step_handler(msg, input_name)
    else:
        bot.send_message(tID, str(data[0][1]) + ", —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏‚úÖ\n",
                         reply_markup=take_keyboard('m1'))


def input_name(message):
    tID = message.chat.id
    data = message.text
    if not checkName(data):
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, input_name)
    else:
        with connection.cursor() as cursor:
            cursor.execute("update users set kid_firstname = \"" +
                           data.split(" ")[0] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set kid_lastname = \"" +
                           data.split(" ")[1] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set kid_patronymic = \"" +
                           data.split(" ")[2] + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()

        bot.send_message(
            tID, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + data.split(" ")[1] +"üôà")
        msg = bot.send_message(
            tID, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(msg, input_date_birth)


def input_date_birth(message):
    tID = message.chat.id
    data = message.text
    if checkDate(data):
        with connection.cursor() as cursor:
            cursor.execute("update users set birth_date = \"" +
                           data + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(
            tID, "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ü–§–î–û, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –Ω–æ–º–µ—Ä\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å 0")
        bot.register_next_step_handler(msg, input_pfdo)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, input_date_birth)


def input_pfdo(message):
    tID = message.chat.id
    data = message.text
    if data == "0":
        bot.send_message(tID, "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ https://pfdo.ru/\n–¢–∞–º —Ç–µ–±—è –∂–¥—ë—Ç –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with connection.cursor() as cursor:
            cursor.execute("update users set cert_number = \"" +
                           "0" + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(
            tID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        bot.register_next_step_handler(msg, input_parent_name)
    elif data.isdigit():
        with connection.cursor() as cursor:
            cursor.execute("update users set cert_number = \"" +
                           data + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(
            tID, "–•–æ—Ä–æ—à–æ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ü–§–î–û, –æ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç –æ–±—É—á–∞—Ç—å—Å—è –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–µ–∫—Ü–∏–π")
        msg = bot.send_message(
            tID, "–ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        bot.register_next_step_handler(msg, input_parent_name)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, input_pfdo)


def input_parent_name(message):
    tID = message.chat.id
    data = message.text
    if not checkName(data):
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, input_parent_name)
    else:
        with connection.cursor() as cursor:
            cursor.execute("update users set parent_firstname = \"" +
                           data.split(" ")[0] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set parent_lastname = \"" +
                           data.split(" ")[1] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set parent_patronymic = \"" +
                           data.split(" ")[2] + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(
            tID, "–û—Ç–ø—Ä–∞–≤—å —Ä–∞–±–æ—á—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —Ä–æ–¥–∏—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, input_email)


def input_email(message):
    tID = message.chat.id
    data = message.text
    if validate_email(data, check_mx=True):
        with connection.cursor() as cursor:
                cursor.execute("update users set parent_email = \"" +
                               data + "\" where tID = \"" + str(tID) + "\"")
                connection.commit()
        msg = bot.send_message(
            tID, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –¥–æ–º–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫—Ä—É–∂–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏")
        bot.register_next_step_handler(msg, get_location)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, input_email)

@bot.message_handler(content_types=["location"])
def get_location(message):
    # –î–û–ë–ê–í–ò–¢–¨ –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
    tID = message.chat.id
    data= str(message.location)
    posX = data[14:23]
    posY = data[37:45]
    posX, posY = posX.strip(","), posY.strip(",")
    with connection.cursor() as cursor:
            cursor.execute("update users set posX = \"" +
                           str(posX) + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set posY = \"" +
                           str(posY) + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set parent_phone = \"" +
                           str(0) + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
    bot.send_message(tID, "–£–∂–µ –ø–æ–¥–±–∏—Ä–∞—é —Ç–µ–±–µ –∫—Ä—É–∂–∫–∏ –æ–∫–æ–ª–æ —Ç–≤–æ–µ–≥–æ –¥–æ–º–∞...")
    with connection.cursor() as cursor:
        cursor.execute("select kid_firstname, kid_lastname from users where tID = \"" + str(tID) + "\"")
        data = cursor.fetchall()
    bot.send_message(
        tID, "–£—Ä–∞! " + str(data[0][1]) + ", —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüéâ\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –∫—Ä—É–∂–∫–∏, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è\n–ù–∞–ø–∏—à–∏ /quiz")

@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    tID = message.chat.id
    with connection.cursor() as cursor:
        cursor.execute("select kid_firstname, kid_lastname, categories from users where tID = \"" + str(tID) + "\"")
        data = cursor.fetchall()
    try:
        if not data[0][2]:
            bot.send_message(tID, "–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –æ —Ç–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö. –û—Ç–≤–µ—á–∞–π \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"")
            msg = bot.send_message(tID, "üö¥–õ—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?")
            bot.register_next_step_handler(msg, pick_sport)
        elif data[0][2]:
            bot.send_message(tID, data[0][1] + ", —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ /menu")
    except Exception:
        bot.send_message(tID, "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏üòî\n–ù–∞–ø–∏—à–∏ /start")

def pick_sport(message):
    tID = message.chat.id
    answer = message.text
    if answer.lower() == "–¥–∞":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = \"" +
                           "1" + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
            msg = bot.send_message(tID, "–ö–∞–∫ –Ω–∞—Å—á—ë—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π IT?")
            bot.register_next_step_handler(msg, pick_it)
    elif answer.lower() == "–Ω–µ—Ç":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = \"" +
                           "" + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(tID, "–ö–∞–∫ –Ω–∞—Å—á—ë—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π IT?")
        bot.register_next_step_handler(msg, pick_it)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, pick_sport)

def pick_it(message):
    tID = message.chat.id
    answer = message.text
    if answer.lower() == "–¥–∞":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = CONCAT(categories, \"" +
                           "2" + "\") where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(tID, "–£–≤–ª–µ–∫–∞–µ—à—å—Å—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º?")
        bot.register_next_step_handler(msg, pick_painting)
    elif answer.lower() == "–Ω–µ—Ç":
        msg = bot.send_message(tID, "–£–≤–ª–µ–∫–∞–µ—à—å—Å—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º?")
        bot.register_next_step_handler(msg, pick_painting)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, pick_it)


def pick_painting(message):
    tID = message.chat.id
    answer = message.text
    if answer.lower() == "–¥–∞":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = CONCAT(categories,\"" +
                           "3" + "\") where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(tID, "–£–≤–ª–µ–∫–∞–µ—à—å—Å—è —à–∞—Ö–º–∞—Ç–∞–º–∏?")
        bot.register_next_step_handler(msg, pick_chess)
    elif answer.lower() == "–Ω–µ—Ç":
        msg = bot.send_message(tID, "–£–≤–ª–µ–∫–∞–µ—à—å—Å—è —à–∞—Ö–º–∞—Ç–∞–º–∏?")
        bot.register_next_step_handler(msg, pick_chess)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, pick_painting)

def pick_chess(message):
    tID = message.chat.id
    answer = message.text
    if answer.lower() == "–¥–∞":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = CONCAT(categories,\"" +
                           "4" + "\") where tID = \"" + str(tID) + "\"")
            connection.commit()
        msg = bot.send_message(tID, "–ú–æ–∂–µ—Ç –ª—é–±–∏—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö?")
        bot.register_next_step_handler(msg, pick_music)
    elif answer.lower() == "–Ω–µ—Ç":
        msg = bot.send_message(tID, "–ú–æ–∂–µ—Ç –ª—é–±–∏—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö?")
        bot.register_next_step_handler(msg, pick_music)
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, pick_chess)

def pick_music(message):
    tID = message.chat.id
    answer = message.text
    if answer.lower() == "–¥–∞":
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = CONCAT(categories,\"" +
                           "5" + "\") where tID = \"" + str(tID) + "\"")
        connection.commit()
        msg = bot.send_message(tID, "–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å–µ —Ç–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è! –ù–∞—á–∏–Ω–∞–π –≤—ã–±–∏—Ä–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")
    elif answer.lower() == "–Ω–µ—Ç":
        msg = bot.send_message(tID, "–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å–µ —Ç–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è! –ù–∞—á–∏–Ω–∞–π –≤—ã–±–∏—Ä–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, pick_music)


# –ø—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(commands=['showprofile'])
def handle_show_profile(message):
    tID = message.chat.id

    with connection.cursor() as cursor:
        cursor.execute("select * from users where tID = \"" + str(tID) + "\"")
        data = cursor.fetchall()
        if data:
            bot.send_message(tID, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:")
            dict = {"1": ", –°–ø–æ—Ä—Ç", "2": ", –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IT", "3": ", –†–∏—Å–æ–≤–∞–Ω–∏–µ", "4": ", –®–∞—Ö–º–∞—Ç—ã", "5": ", –ú—É–∑—ã–∫–∞"}
            cat = ""
            try:
                for a in data[0][13]:
                    cat = cat + dict[a]
            except Exception:
                pass
            info_pro = "–¢–≤–æ—ë –§–ò–û: " + str(data[0][0]) + " " + str(data[0][1]) + " " + data[0][2] + "\n" + \
            "–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + data[0][10] + "\n" + \
            "–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ü–§–î–û: " + data[0][9] + "\n" + \
            "–§–ò–û –†–æ–¥–∏—Ç–µ–ª—è: " + str(data[0][3]) + " " + str(data[0][4]) + " " + data[0][5] + "\n" + \
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: " + data[0][8] + "\n" + \
            "–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: " + cat[2:] + \
            "\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏ /editprofile"
            bot.send_message(message.chat.id, text=info_pro)
        else:
            bot.send_message(tID, "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏üòî\n–ù–∞–ø–∏—à–∏ /start")

@bot.message_handler(commands=['editprofile'])
def handle_edit_profile(message):
    tID = message.chat.id
    with connection.cursor() as cursor:
        cursor.execute("select * from users where tID = \"" + str(tID) + "\"")
        data = cursor.fetchall()
    if data:
        bot.send_message(tID, "–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:")
        dict = {"1":", –°–ø–æ—Ä—Ç", "2":", –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IT","3":", –†–∏—Å–æ–≤–∞–Ω–∏–µ","4":", –®–∞—Ö–º–∞—Ç—ã","5":", –ú—É–∑—ã–∫–∞"}
        cat = ""
        try:
            for a in data[0][13]:
                cat = cat + dict[a]
        except Exception:
            pass
        info = "1. –¢–≤–æ—ë –§–ò–û: " + str(data[0][0]) + " " + str(data[0][1]) + " " + data[0][2] + "\n" + \
            "2. –¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + data[0][10] + "\n" + \
            "3. –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ü–§–î–û: " + data[0][9] + "\n" + \
            "4. –§–ò–û –†–æ–¥–∏—Ç–µ–ª—è: " + str(data[0][3]) + " " + str(data[0][4]) + " " + data[0][5] + "\n" + \
            "5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: " + data[0][8] + "\n" + \
            "6. –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: " + cat[2:] + '\n' + \
            '7. –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        bot.send_message(tID, info)
        msg = bot.send_message(tID, "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(msg, pick_line)
    else:
        bot.send_message(tID, "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –î–µ—Ç–∏üòî\n–ù–∞–ø–∏—à–∏ /start")


def pick_line(message):
    tID = message.chat.id
    num = message.text
    if num.isdigit() and len(num) == 1 and int(num) in range(1,8):
        num = int(num)
        if num == 1:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            bot.register_next_step_handler(msg, commit_kid_name)
        elif num == 2:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(msg, commit_birth_date)
        elif num == 3:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ü–§–î–û, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏ 0")
            bot.register_next_step_handler(msg, commit_pfdo_num)

        elif num == 4:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            bot.register_next_step_handler(msg, commit_parent_name)

        elif num == 5:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤—É—é—â—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —Ä–æ–¥–∏—Ç–µ–ª—è")
            bot.register_next_step_handler(msg, commit_parent_email)

        elif num == 6:
            msg = bot.send_message(tID, "–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 124\n1. –°–ø–æ—Ä—Ç\n2. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IT\n3. –†–∏—Å–æ–≤–∞–Ω–∏–µ\n4. –®–∞—Ö–º–∞—Ç—ã\n5. –ú—É–∑—ã–∫–∞")
            bot.register_next_step_handler(msg, commit_categories)

        elif num == 7:
            msg = bot.send_message(tID, "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            bot.register_next_step_handler(msg, commit_location)
        else:
            msg = bot.send_message(tID, incorrect_input_text)
            bot.register_next_step_handler(msg, pick_line)


def commit_kid_name(message):
    tID = message.chat.id
    data = message.text
    if not checkName(data):
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_kid_name)
    else:
        with connection.cursor() as cursor:
            cursor.execute("update users set kid_firstname = \"" +
                           data.split(" ")[0] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set kid_lastname = \"" +
                           data.split(" ")[1] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set kid_patronymic = \"" +
                           data.split(" ")[2] + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()

        bot.send_message(
            tID, "–¢–≤–æ—ë –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    handle_menu(message)


def commit_birth_date(message):
    tID = message.chat.id
    data = message.text
    if checkDate(data):
        with connection.cursor() as cursor:
            cursor.execute("update users set birth_date = \"" +
                           data + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(tID, "–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_birth_date)
    handle_menu(message)


def commit_pfdo_num(message):
    tID = message.chat.id
    data = message.text
    if data == "0":
        with connection.cursor() as cursor:
            cursor.execute("update users set cert_number = \"" +
                           "0" + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(tID, "–¢–≤–æ–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ü–§–î–û –æ–±–Ω–æ–≤–ª—ë–Ω")
    elif data.isdigit():
        with connection.cursor() as cursor:
            cursor.execute("update users set cert_number = \"" +
                           data + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(tID, "–¢–≤–æ–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ü–§–î–û –æ–±–Ω–æ–≤–ª—ë–Ω")
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_pfdo_num)
    handle_menu(message)


def commit_parent_name(message):
    tID = message.chat.id
    data = message.text
    if not checkName(data):
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_parent_name)
    else:
        with connection.cursor() as cursor:
            cursor.execute("update users set parent_firstname = \"" +
                           data.split(" ")[0] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set parent_lastname = \"" +
                           data.split(" ")[1] + "\" where tID = \"" + str(tID) + "\"")
            cursor.execute("update users set parent_patronymic = \"" +
                           data.split(" ")[2] + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(tID, "–§–ò–û —Ç–≤–æ–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


def commit_parent_email (message):
    tID = message.chat.id
    data = message.text
    if validate_email(data, check_mx=True):
        with connection.cursor() as cursor:
                cursor.execute("update users set parent_email = \"" +
                               data + "\" where tID = \"" + str(tID) + "\"")
                connection.commit()
        bot.send_message(tID, "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —Ç–≤–æ–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_parent_email)
    # –ü–†–û–í–ï–†–ö–ê –ü–û–ß–¢–´
    handle_menu(message)


def commit_categories(message):
    tID = message.chat.id
    data = message.text
    if not data.isdigit():
        msg = bot.send_message(tID, incorrect_input_text)
        bot.register_next_step_handler(msg, commit_categories)
    else:
        with connection.cursor() as cursor:
            cursor.execute("update users set categories = \"" +
                            data + "\" where tID = \"" + str(tID) + "\"")
            connection.commit()
        bot.send_message(tID, "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω")
        handle_menu(message)
@bot.message_handler(content_types=['location'])
def commit_location(message):
    tID = message.chat.id
    data = str(message.location)
    posX = data[14:23]
    posY = data[37:45]
    with connection.cursor() as cursor:
        cursor.execute("update users set posX = \"" +
                       str(posX) + "\" where tID = \"" + str(tID) + "\"")
        cursor.execute("update users set posY = \"" +
                       str(posY) + "\" where tID = \"" + str(tID) + "\"")
        cursor.execute("update users set parent_phone = \"" +
                       str(0) + "\" where tID = \"" + str(tID) + "\"")
        connection.commit()
    bot.send_message(tID, "–¢–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


# –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–≤–æ–¥–∞
@bot.message_handler(func=lambda text:True)
def text_check(message):
    with connection.cursor() as cur:
        cur.execute('select * from clubs')
        db = cur.fetchall()
    try:
        if 0 < int(message.text) <= len(db):
            handle_info(message, int(message.text))
            print(message.text, "----")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ñ—Ä—ã –∫—Ä—É–∂–∫–∞")
        print(e)


bot.polling()